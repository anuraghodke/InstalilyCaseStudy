{"ast":null,"code":"import axios from 'axios';\nimport partData from '../partData.json';\nconst API_KEY = process.env.REACT_APP_DEEPSEEK_API_KEY;\nconst API_URL = 'https://api.deepseek.com/v1/chat/completions';\n\n// Read part and appliance type\nconst extractContextFromMessages = messages => {\n  const lastMessage = messages[messages.length - 1].content.toLowerCase();\n  let partType = 'unknown';\n  let appliance = 'unknown';\n  if (lastMessage.includes('drain pump')) partType = 'drain pump';else if (lastMessage.includes('ice maker')) partType = 'ice maker';else if (lastMessage.includes('filter')) partType = 'filter';else if (lastMessage.includes('gasket')) partType = 'gasket';\n  if (lastMessage.includes('dishwasher')) appliance = 'dishwasher';else if (lastMessage.includes('refrigerator')) appliance = 'refrigerator';else if (lastMessage.includes('freezer')) appliance = 'freezer';\n  return {\n    partType,\n    appliance\n  };\n};\n\n// Filter part numbers based on part type and appliance\nconst filterPartNumbers = (partType, appliance) => {\n  return Object.keys(partData).filter(partNumber => {\n    const part = partData[partNumber];\n    const matchesPartType = partType === 'unknown' || part.partType === partType;\n    const matchesAppliance = appliance === 'unknown' || part.appliance === appliance;\n    return matchesPartType && matchesAppliance;\n  });\n};\nexport const getAIMessage = async messages => {\n  try {\n    // Extract context from the user's message\n    const {\n      partType,\n      appliance\n    } = extractContextFromMessages(messages);\n\n    // Filter valid part numbers based on context\n    const validPartNumbers = filterPartNumbers(partType, appliance);\n\n    // Construct the system prompt with the filtered list of valid part numbers\n    const systemPrompt = `\n      You are a helpful assistant for appliance parts. Provide accurate information about appliance parts and troubleshooting.\n      The user is asking about a ${partType} for a ${appliance}.\n      When mentioning part numbers, you MUST only use part numbers from the following list: ${validPartNumbers.join(', ') || 'none'}.\n      Do NOT generate or use random part numbers that are not in this list.\n      If no applicable part numbers are available for the requested part type and appliance, do not mention a specific part number and instead suggest that the user contact support for assistance.\n    `;\n    const response = await axios.post(API_URL, {\n      model: 'deepseek-chat',\n      messages: [{\n        role: 'system',\n        content: systemPrompt\n      }, ...messages],\n      max_tokens: 500,\n      temperature: 0.7\n    }, {\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data.choices[0].message;\n  } catch (error) {\n    console.error('Error calling DeepSeek API:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","partData","API_KEY","process","env","REACT_APP_DEEPSEEK_API_KEY","API_URL","extractContextFromMessages","messages","lastMessage","length","content","toLowerCase","partType","appliance","includes","filterPartNumbers","Object","keys","filter","partNumber","part","matchesPartType","matchesAppliance","getAIMessage","validPartNumbers","systemPrompt","join","response","post","model","role","max_tokens","temperature","headers","data","choices","message","error","console"],"sources":["/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/api/api.js"],"sourcesContent":["import axios from 'axios';\nimport partData from '../partData.json';\n\nconst API_KEY = process.env.REACT_APP_DEEPSEEK_API_KEY\nconst API_URL = 'https://api.deepseek.com/v1/chat/completions';\n\n// Read part and appliance type\nconst extractContextFromMessages = (messages) => {\n  const lastMessage = messages[messages.length - 1].content.toLowerCase();\n  let partType = 'unknown';\n  let appliance = 'unknown';\n\n  if (lastMessage.includes('drain pump')) partType = 'drain pump';\n  else if (lastMessage.includes('ice maker')) partType = 'ice maker';\n  else if (lastMessage.includes('filter')) partType = 'filter';\n  else if (lastMessage.includes('gasket')) partType = 'gasket';\n\n  if (lastMessage.includes('dishwasher')) appliance = 'dishwasher';\n  else if (lastMessage.includes('refrigerator')) appliance = 'refrigerator';\n  else if (lastMessage.includes('freezer')) appliance = 'freezer';\n\n  return { partType, appliance };\n};\n\n// Filter part numbers based on part type and appliance\nconst filterPartNumbers = (partType, appliance) => {\n  return Object.keys(partData).filter(partNumber => {\n    const part = partData[partNumber];\n    const matchesPartType = partType === 'unknown' || part.partType === partType;\n    const matchesAppliance = appliance === 'unknown' || part.appliance === appliance;\n    return matchesPartType && matchesAppliance;\n  });\n};\n\nexport const getAIMessage = async (messages) => {\n  try {\n    // Extract context from the user's message\n    const { partType, appliance } = extractContextFromMessages(messages);\n\n    // Filter valid part numbers based on context\n    const validPartNumbers = filterPartNumbers(partType, appliance);\n\n    // Construct the system prompt with the filtered list of valid part numbers\n    const systemPrompt = `\n      You are a helpful assistant for appliance parts. Provide accurate information about appliance parts and troubleshooting.\n      The user is asking about a ${partType} for a ${appliance}.\n      When mentioning part numbers, you MUST only use part numbers from the following list: ${validPartNumbers.join(', ') || 'none'}.\n      Do NOT generate or use random part numbers that are not in this list.\n      If no applicable part numbers are available for the requested part type and appliance, do not mention a specific part number and instead suggest that the user contact support for assistance.\n    `;\n\n    const response = await axios.post(\n      API_URL,\n      {\n        model: 'deepseek-chat',\n        messages: [\n          {\n            role: 'system',\n            content: systemPrompt\n          },\n          ...messages\n        ],\n        max_tokens: 500,\n        temperature: 0.7\n      },\n      {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    return response.data.choices[0].message;\n  } catch (error) {\n    console.error('Error calling DeepSeek API:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}