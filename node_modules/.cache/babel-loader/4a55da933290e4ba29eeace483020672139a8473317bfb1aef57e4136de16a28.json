{"ast":null,"code":"var _jsxFileName = \"/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatWindow.css'; // Assuming there's a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = ({\n  selectedChat,\n  shouldClear,\n  onChatCleared,\n  onMessagesUpdate,\n  matchingProducts,\n  language,\n  getAIMessage,\n  // API call function (assumed to be passed as a prop)\n  parseMessageText // Function to format message text (assumed to be passed or imported)\n}) => {\n  _s();\n  // State for messages, input, and typing indicator\n  const [messages, setMessages] = useState((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.messages) || []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Ref to auto-scroll to the latest message\n  const messagesEndRef = useRef(null);\n\n  // Effect to handle clearing the chat or updating messages when selectedChat changes\n  useEffect(() => {\n    if (shouldClear) {\n      setMessages([]);\n      setInput('');\n      setIsTyping(false);\n      onChatCleared(); // Notify parent that chat has been cleared\n    } else if (selectedChat && JSON.stringify(selectedChat.messages) !== JSON.stringify(messages)) {\n      setMessages(selectedChat.messages || []);\n    }\n  }, [shouldClear, selectedChat, onChatCleared]);\n\n  // Effect to auto-scroll to the bottom when messages or typing state changes\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages, isTyping]);\n\n  // Effect to notify parent of message updates\n  useEffect(() => {\n    if (messages.length > 0) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate]);\n\n  // Function to handle sending a new message\n  const handleSendMessage = async () => {\n    if (!input.trim()) return; // Prevent sending empty messages\n\n    // Create a unique ID for the user message using timestamp\n    const messageId = Date.now();\n    const userMessage = {\n      id: messageId,\n      text: input,\n      sender: 'user',\n      role: 'user',\n      content: input\n    };\n\n    // Append the user message to the current messages using functional update\n    setMessages(prev => [...prev, userMessage]);\n    setInput(''); // Clear the input field\n    setIsTyping(true); // Show typing indicator\n\n    try {\n      // Prepare all messages for the API call, including the new user message\n      let apiMessages = messages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      })).concat({\n        role: 'user',\n        content: input\n      });\n\n      // Add system context if there are matching products\n      if (matchingProducts && matchingProducts.length > 0) {\n        const productTitles = matchingProducts.map(product => product.name).join(', ');\n        const contextMessage = {\n          role: 'system',\n          content: `The part is a ${productTitles}. Use this information to generate a relevant response to the user's message.`\n        };\n        apiMessages = [contextMessage, ...apiMessages];\n      }\n\n      // Call the API to get the bot's response\n      const apiResponse = await getAIMessage(apiMessages, language);\n\n      // Assuming apiResponse contains the bot's message text (adjust based on actual API response structure)\n      const botMessageText = apiResponse.content || apiResponse; // Modify as per API response\n\n      // Create a bot message with a unique ID\n      const botMessage = {\n        id: messageId + 1,\n        // Ensure uniqueness by incrementing\n        text: botMessageText,\n        sender: 'bot',\n        role: 'assistant',\n        content: botMessageText\n      };\n\n      // Append the bot message to the current messages\n      setMessages(prev => [...prev, botMessage]);\n      setIsTyping(false); // Hide typing indicator\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setIsTyping(false); // Hide typing indicator on error\n    }\n  };\n\n  // Handle Enter key press to send message\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: parseMessageText(message.text)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content typing\",\n          children: language === 'English' ? 'Typing...' : 'Escribiendo...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: language === 'English' ? 'Type a message...' : 'Escribe un mensaje...',\n        disabled: isTyping // Disable input while bot is responding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: isTyping || !input.trim(),\n        children: language === 'English' ? 'Send' : 'Enviar'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"4w02wyGWl+COPhdJiMTNvjWRpu4=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChatWindow","selectedChat","shouldClear","onChatCleared","onMessagesUpdate","matchingProducts","language","getAIMessage","parseMessageText","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","messagesEndRef","JSON","stringify","_messagesEndRef$curre","current","scrollIntoView","behavior","length","handleSendMessage","trim","messageId","Date","now","userMessage","id","text","sender","role","content","prev","apiMessages","map","msg","concat","productTitles","product","name","join","contextMessage","apiResponse","botMessageText","botMessage","error","console","handleKeyPress","e","key","className","children","message","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","target","onKeyPress","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatWindow.css'; // Assuming there's a CSS file for styling\n\nconst ChatWindow = ({\n  selectedChat,\n  shouldClear,\n  onChatCleared,\n  onMessagesUpdate,\n  matchingProducts,\n  language,\n  getAIMessage, // API call function (assumed to be passed as a prop)\n  parseMessageText, // Function to format message text (assumed to be passed or imported)\n}) => {\n  // State for messages, input, and typing indicator\n  const [messages, setMessages] = useState(selectedChat?.messages || []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Ref to auto-scroll to the latest message\n  const messagesEndRef = useRef(null);\n\n  // Effect to handle clearing the chat or updating messages when selectedChat changes\n  useEffect(() => {\n    if (shouldClear) {\n      setMessages([]);\n      setInput('');\n      setIsTyping(false);\n      onChatCleared(); // Notify parent that chat has been cleared\n    } else if (selectedChat && JSON.stringify(selectedChat.messages) !== JSON.stringify(messages)) {\n      setMessages(selectedChat.messages || []);\n    }\n  }, [shouldClear, selectedChat, onChatCleared]);\n\n  // Effect to auto-scroll to the bottom when messages or typing state changes\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isTyping]);\n\n  // Effect to notify parent of message updates\n  useEffect(() => {\n    if (messages.length > 0) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate]);\n\n  // Function to handle sending a new message\n  const handleSendMessage = async () => {\n    if (!input.trim()) return; // Prevent sending empty messages\n\n    // Create a unique ID for the user message using timestamp\n    const messageId = Date.now();\n    const userMessage = {\n      id: messageId,\n      text: input,\n      sender: 'user',\n      role: 'user',\n      content: input,\n    };\n\n    // Append the user message to the current messages using functional update\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(''); // Clear the input field\n    setIsTyping(true); // Show typing indicator\n\n    try {\n      // Prepare all messages for the API call, including the new user message\n      let apiMessages = messages.map((msg) => ({\n        role: msg.role,\n        content: msg.content,\n      })).concat({ role: 'user', content: input });\n\n      // Add system context if there are matching products\n      if (matchingProducts && matchingProducts.length > 0) {\n        const productTitles = matchingProducts.map((product) => product.name).join(', ');\n        const contextMessage = {\n          role: 'system',\n          content: `The part is a ${productTitles}. Use this information to generate a relevant response to the user's message.`,\n        };\n        apiMessages = [contextMessage, ...apiMessages];\n      }\n\n      // Call the API to get the bot's response\n      const apiResponse = await getAIMessage(apiMessages, language);\n\n      // Assuming apiResponse contains the bot's message text (adjust based on actual API response structure)\n      const botMessageText = apiResponse.content || apiResponse; // Modify as per API response\n\n      // Create a bot message with a unique ID\n      const botMessage = {\n        id: messageId + 1, // Ensure uniqueness by incrementing\n        text: botMessageText,\n        sender: 'bot',\n        role: 'assistant',\n        content: botMessageText,\n      };\n\n      // Append the bot message to the current messages\n      setMessages((prev) => [...prev, botMessage]);\n      setIsTyping(false); // Hide typing indicator\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setIsTyping(false); // Hide typing indicator on error\n    }\n  };\n\n  // Handle Enter key press to send message\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-window\">\n      {/* Chat messages display */}\n      <div className=\"chat-messages\">\n        {messages.map((message) => (\n          <div key={message.id} className={`message ${message.sender}`}>\n            <div className=\"message-content\">\n              {parseMessageText(message.text)}\n            </div>\n          </div>\n        ))}\n        {isTyping && (\n          <div className=\"message bot\">\n            <div className=\"message-content typing\">\n              {language === 'English' ? 'Typing...' : 'Escribiendo...'}\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} /> {/* Auto-scroll target */}\n      </div>\n\n      {/* Input area */}\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder={language === 'English' ? 'Type a message...' : 'Escribe un mensaje...'}\n          disabled={isTyping} // Disable input while bot is responding\n        />\n        <button onClick={handleSendMessage} disabled={isTyping || !input.trim()}>\n          {language === 'English' ? 'Send' : 'Enviar'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}