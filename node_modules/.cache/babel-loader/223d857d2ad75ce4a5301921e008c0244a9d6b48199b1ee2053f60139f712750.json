{"ast":null,"code":"var _jsxFileName = \"/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getAIMessage } from '../api/api';\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWindow = ({\n  partData,\n  onProductSelect,\n  selectedChat,\n  onMessagesUpdate,\n  language\n}) => {\n  _s();\n  const [messages, setMessages] = useState((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.messages) || []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const textareaRef = useRef(null);\n  useEffect(() => {\n    try {\n      setMessages((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.messages) || []);\n    } catch (error) {\n      console.error('Error updating messages:', error);\n      setMessages([]);\n    }\n  }, [selectedChat]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages, isTyping]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate]);\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    }\n  }, [input]);\n  const parseMessageText = text => {\n    const lines = text.split('\\n');\n    return lines.map((line, lineIndex) => {\n      const linkRegex = /\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n      while ((match = linkRegex.exec(line)) !== null) {\n        const [fullMatch, linkText, url] = match;\n        const startIndex = match.index;\n        if (startIndex > lastIndex) {\n          const beforeText = line.slice(lastIndex, startIndex);\n          parts.push(parseBoldText(beforeText, `${lineIndex}-${lastIndex}`));\n        }\n        parts.push(/*#__PURE__*/_jsxDEV(\"a\", {\n          href: url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          style: {\n            color: '#2A3F44',\n            textDecoration: 'underline'\n          },\n          children: linkText\n        }, `${lineIndex}-${startIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this));\n        lastIndex = startIndex + fullMatch.length;\n      }\n      if (lastIndex < line.length) {\n        const remainingText = line.slice(lastIndex);\n        parts.push(parseBoldText(remainingText, `${lineIndex}-${lastIndex}`));\n      }\n      if (parts.length === 0) {\n        parts.push(parseBoldText(line, `${lineIndex}-0`));\n      }\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [parts, lineIndex < lines.length - 1 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 44\n        }, this)]\n      }, lineIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const parseBoldText = (text, keyPrefix) => {\n    const parts = text.split(/(\\*\\*[^*]+\\*\\*)/g);\n    return parts.map((part, partIndex) => {\n      if (part.startsWith('**') && part.endsWith('**')) {\n        const boldText = part.slice(2, -2);\n        return /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: boldText\n        }, `${keyPrefix}-${partIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 16\n        }, this);\n      }\n      return part;\n    });\n  };\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      role: 'user',\n      content: input\n    };\n    setMessages(prev => {\n      const newMessages = [...prev, userMessage];\n      onMessagesUpdate(newMessages);\n      return newMessages;\n    });\n    setInput('');\n    setIsTyping(true);\n    const partNumberRegex = /PS-?\\s?\\d+/gi;\n    const partNumbers = input.match(partNumberRegex) || [];\n    let matchingProducts = [];\n    let validPartNumbers = [];\n    if (partNumbers.length > 0) {\n      const normalizedPartNumbers = partNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      validPartNumbers = normalizedPartNumbers.filter(pn => partData[pn]);\n      matchingProducts = validPartNumbers.map(pn => partData[pn]);\n    }\n    if (matchingProducts.length > 0) {\n      const botMessage = {\n        text: language === 'English' ? 'Here are the parts I found:' : 'Aquí están las piezas que encontré:',\n        sender: 'bot',\n        role: 'assistant',\n        content: language === 'English' ? 'Here are the parts I found:' : 'Aquí están las piezas que encontré:',\n        partNumbers: validPartNumbers\n      };\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        setIsTyping(false);\n        return newMessages;\n      });\n      onProductSelect(matchingProducts);\n    } else {\n      try {\n        const apiMessages = messages.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        })).concat({\n          role: 'user',\n          content: input\n        });\n        const apiResponse = await getAIMessage(apiMessages, language);\n        const apiPartNumbers = apiResponse.content.match(partNumberRegex) || [];\n        const normalizedApiPartNumbers = apiPartNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n        const validApiPartNumbers = normalizedApiPartNumbers.filter(pn => partData[pn]);\n        const apiProducts = validApiPartNumbers.map(pn => partData[pn]);\n        const botMessage = {\n          text: apiResponse.content,\n          sender: 'bot',\n          role: 'assistant',\n          content: apiResponse.content,\n          partNumbers: validApiPartNumbers\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          setIsTyping(false);\n          return newMessages;\n        });\n        if (apiProducts.length > 0) {\n          onProductSelect(apiProducts);\n        }\n      } catch (error) {\n        console.error('Error fetching response from API:', error);\n        const botMessage = {\n          text: language === 'English' ? 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.' : 'Ocurrió un error al obtener la respuesta. Por favor, intenta de nuevo o contacta al soporte en ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n          sender: 'bot',\n          role: 'assistant',\n          content: language === 'English' ? 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.' : 'Ocurrió un error al obtener la respuesta. Por favor, intenta de nuevo o contacta al soporte en ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.'\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          setIsTyping(false);\n          return newMessages;\n        });\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.length === 0 && !isTyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-message\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: language === 'English' ? '✨ Assistance for your appliance needs' : '✨ Asistencia para tus necesidades de electrodomésticos'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: parseMessageText(message.text)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content typing\",\n            children: language === 'English' ? 'Typing...' : 'Escribiendo...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: textareaRef,\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyPress,\n        placeholder: language === 'English' ? 'Ask about your appliance needs' : 'Pregunte por sus necesidades de electrodomésticos',\n        className: \"chat-textarea\",\n        rows: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"/P+M1jn8Ax0bsFQDGMSpQ3EGllE=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getAIMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","partData","onProductSelect","selectedChat","onMessagesUpdate","language","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","messagesEndRef","textareaRef","error","console","_messagesEndRef$curre","current","scrollIntoView","behavior","length","textarea","style","height","scrollHeight","parseMessageText","text","lines","split","map","line","lineIndex","linkRegex","parts","lastIndex","match","exec","fullMatch","linkText","url","startIndex","index","beforeText","slice","push","parseBoldText","href","target","rel","color","textDecoration","children","fileName","_jsxFileName","lineNumber","columnNumber","remainingText","keyPrefix","part","partIndex","startsWith","endsWith","boldText","handleSendMessage","trim","userMessage","sender","role","content","prev","newMessages","partNumberRegex","partNumbers","matchingProducts","validPartNumbers","normalizedPartNumbers","pn","replace","toUpperCase","filter","botMessage","apiMessages","msg","concat","apiResponse","apiPartNumbers","normalizedApiPartNumbers","validApiPartNumbers","apiProducts","handleKeyPress","e","key","shiftKey","preventDefault","className","message","ref","value","onChange","onKeyDown","placeholder","rows","onClick","_c","$RefreshReg$"],"sources":["/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { getAIMessage } from '../api/api'; \nimport './ChatWindow.css';\n\nconst ChatWindow = ({ partData, onProductSelect, selectedChat, onMessagesUpdate, language }) => {\n  const [messages, setMessages] = useState(selectedChat?.messages || []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    try {\n      setMessages(selectedChat?.messages || []);\n    } catch (error) {\n      console.error('Error updating messages:', error);\n      setMessages([]);\n    }\n  }, [selectedChat]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isTyping]);\n\n  useEffect(() => {\n    if (messages.length > 0) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate]);\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    }\n  }, [input]);\n\n  const parseMessageText = (text) => {\n    const lines = text.split('\\n');\n    return lines.map((line, lineIndex) => {\n      const linkRegex = /\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n\n      while ((match = linkRegex.exec(line)) !== null) {\n        const [fullMatch, linkText, url] = match;\n        const startIndex = match.index;\n\n        if (startIndex > lastIndex) {\n          const beforeText = line.slice(lastIndex, startIndex);\n          parts.push(parseBoldText(beforeText, `${lineIndex}-${lastIndex}`));\n        }\n\n        parts.push(\n          <a\n            key={`${lineIndex}-${startIndex}`}\n            href={url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ color: '#2A3F44', textDecoration: 'underline' }}\n          >\n            {linkText}\n          </a>\n        );\n\n        lastIndex = startIndex + fullMatch.length;\n      }\n\n      if (lastIndex < line.length) {\n        const remainingText = line.slice(lastIndex);\n        parts.push(parseBoldText(remainingText, `${lineIndex}-${lastIndex}`));\n      }\n\n      if (parts.length === 0) {\n        parts.push(parseBoldText(line, `${lineIndex}-0`));\n      }\n\n      return (\n        <React.Fragment key={lineIndex}>\n          {parts}\n          {lineIndex < lines.length - 1 && <br />}\n        </React.Fragment>\n      );\n    });\n  };\n\n  const parseBoldText = (text, keyPrefix) => {\n    const parts = text.split(/(\\*\\*[^*]+\\*\\*)/g);\n    return parts.map((part, partIndex) => {\n      if (part.startsWith('**') && part.endsWith('**')) {\n        const boldText = part.slice(2, -2);\n        return <strong key={`${keyPrefix}-${partIndex}`}>{boldText}</strong>;\n      }\n      return part;\n    });\n  };\n\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: 'user', role: 'user', content: input };\n    setMessages(prev => {\n      const newMessages = [...prev, userMessage];\n      onMessagesUpdate(newMessages);\n      return newMessages;\n    });\n    setInput('');\n    setIsTyping(true);\n\n    const partNumberRegex = /PS-?\\s?\\d+/gi;\n    const partNumbers = input.match(partNumberRegex) || [];\n\n    let matchingProducts = [];\n    let validPartNumbers = [];\n    if (partNumbers.length > 0) {\n      const normalizedPartNumbers = partNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      validPartNumbers = normalizedPartNumbers.filter(pn => partData[pn]);\n      matchingProducts = validPartNumbers.map(pn => partData[pn]);\n    }\n\n    if (matchingProducts.length > 0) {\n      const botMessage = {\n        text: language === 'English' ? 'Here are the parts I found:' : 'Aquí están las piezas que encontré:',\n        sender: 'bot',\n        role: 'assistant',\n        content: language === 'English' ? 'Here are the parts I found:' : 'Aquí están las piezas que encontré:',\n        partNumbers: validPartNumbers,\n      };\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        setIsTyping(false);\n        return newMessages;\n      });\n      onProductSelect(matchingProducts);\n    } else {\n      try {\n        const apiMessages = messages.map(msg => ({\n          role: msg.role,\n          content: msg.content,\n        })).concat({ role: 'user', content: input });\n\n        const apiResponse = await getAIMessage(apiMessages, language);\n        const apiPartNumbers = apiResponse.content.match(partNumberRegex) || [];\n        const normalizedApiPartNumbers = apiPartNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n        const validApiPartNumbers = normalizedApiPartNumbers.filter(pn => partData[pn]);\n        const apiProducts = validApiPartNumbers.map(pn => partData[pn]);\n\n        const botMessage = {\n          text: apiResponse.content,\n          sender: 'bot',\n          role: 'assistant',\n          content: apiResponse.content,\n          partNumbers: validApiPartNumbers,\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          setIsTyping(false);\n          return newMessages;\n        });\n\n        if (apiProducts.length > 0) {\n          onProductSelect(apiProducts);\n        }\n      } catch (error) {\n        console.error('Error fetching response from API:', error);\n        const botMessage = {\n          text: language === 'English'\n            ? 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.'\n            : 'Ocurrió un error al obtener la respuesta. Por favor, intenta de nuevo o contacta al soporte en ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n          sender: 'bot',\n          role: 'assistant',\n          content: language === 'English'\n            ? 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.'\n            : 'Ocurrió un error al obtener la respuesta. Por favor, intenta de nuevo o contacta al soporte en ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          setIsTyping(false);\n          return newMessages;\n        });\n      }\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-messages\">\n        {messages.length === 0 && !isTyping ? (\n          <div className=\"welcome-message\">\n            <h2>\n              {language === 'English'\n                ? '✨ Assistance for your appliance needs'\n                : '✨ Asistencia para tus necesidades de electrodomésticos'}\n            </h2>\n          </div>\n        ) : (\n          <>\n            {messages.map((message, index) => (\n              <div key={index} className={`message ${message.sender}`}>\n                <div className=\"message-content\">\n                  {parseMessageText(message.text)}\n                </div>\n              </div>\n            ))}\n            {isTyping && (\n              <div className=\"message bot\">\n                <div className=\"message-content typing\">\n                  {language === 'English' ? 'Typing...' : 'Escribiendo...'}\n                </div>\n              </div>\n            )}\n          </>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"chat-input\">\n        <textarea\n          ref={textareaRef}\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder={\n            language === 'English'\n              ? 'Ask about your appliance needs'\n              : 'Pregunte por sus necesidades de electrodomésticos'\n          }\n          className=\"chat-textarea\"\n          rows=\"1\"\n        />\n        <button onClick={handleSendMessage}>➤</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}