{"ast":null,"code":"var _jsxFileName = \"/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getAIMessage } from '../api/api';\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWindow = ({\n  partData,\n  onProductSelect,\n  selectedChat,\n  onMessagesUpdate,\n  language,\n  shouldClear,\n  onChatCleared\n}) => {\n  _s();\n  const [messages, setMessages] = useState((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.messages) || []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const textareaRef = useRef(null);\n  useEffect(() => {\n    setMessages((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.messages) || []);\n  }, [selectedChat]);\n  useEffect(() => {\n    if (shouldClear) {\n      setMessages([]);\n      setInput('');\n      setIsTyping(false);\n      onChatCleared();\n    }\n  }, [shouldClear, onChatCleared]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages, isTyping]);\n  useEffect(() => {\n    if (messages.length > 0 && (selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.messages) !== messages) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate, selectedChat]);\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    }\n  }, [input]);\n  const parseMessageText = text => {\n    const lines = text.split('\\n');\n    return lines.map((line, lineIndex) => {\n      const linkRegex = /\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n      while ((match = linkRegex.exec(line)) !== null) {\n        const [fullMatch, linkText, url] = match;\n        const startIndex = match.index;\n        if (startIndex > lastIndex) {\n          const beforeText = line.slice(lastIndex, startIndex);\n          parts.push(parseBoldText(beforeText, `${lineIndex}-${lastIndex}`));\n        }\n        parts.push(/*#__PURE__*/_jsxDEV(\"a\", {\n          href: url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          style: {\n            color: '#2A3F44',\n            textDecoration: 'underline'\n          },\n          children: linkText\n        }, `${lineIndex}-${startIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this));\n        lastIndex = startIndex + fullMatch.length;\n      }\n      if (lastIndex < line.length) {\n        const remainingText = line.slice(lastIndex);\n        parts.push(parseBoldText(remainingText, `${lineIndex}-${lastIndex}`));\n      }\n      if (parts.length === 0) {\n        parts.push(parseBoldText(line, `${lineIndex}-0`));\n      }\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [parts, lineIndex < lines.length - 1 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 44\n        }, this)]\n      }, lineIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const parseBoldText = (text, keyPrefix) => {\n    const parts = text.split(/(\\*\\*[^*]+\\*\\*)/g);\n    return parts.map((part, partIndex) => {\n      if (part.startsWith('**') && part.endsWith('**')) {\n        const boldText = part.slice(2, -2);\n        return /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: boldText\n        }, `${keyPrefix}-${partIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 16\n        }, this);\n      }\n      return part;\n    });\n  };\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      role: 'user',\n      content: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsTyping(true);\n    const partNumberRegex = /PS-?\\s?\\d+/gi;\n    const partNumbers = input.match(partNumberRegex) || [];\n    let matchingProducts = [];\n    let validPartNumbers = [];\n    if (partNumbers.length > 0) {\n      const normalizedPartNumbers = partNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      validPartNumbers = normalizedPartNumbers.filter(pn => partData[pn]);\n      matchingProducts = validPartNumbers.map(pn => partData[pn]);\n    }\n    if (matchingProducts.length > 0) {\n      const partsMessage = {\n        text: language === 'English' ? 'Here are the parts I found, I have displayed them in the product card window on the right.' : 'Aquí están las piezas que encontré, las he mostrado en la ventana de tarjetas de productos a la derecha.',\n        sender: 'bot',\n        role: 'assistant',\n        content: language === 'English' ? 'Here are the parts I found, I have displayed them in the product card window on the right.' : 'Aquí están las piezas que encontré, las he mostrado en la ventana de tarjetas de productos a la derecha.',\n        partNumbers: validPartNumbers\n      };\n      setMessages(prev => [...prev, partsMessage]);\n      onProductSelect(matchingProducts);\n    }\n\n    // Continue with API response regardless of parts found\n    try {\n      const apiMessages = messages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      })).concat({\n        role: 'user',\n        content: input\n      });\n      const apiResponse = await getAIMessage(apiMessages, language);\n      const apiPartNumbers = apiResponse.content.match(partNumberRegex) || [];\n      const normalizedApiPartNumbers = apiPartNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      const validApiPartNumbers = normalizedApiPartNumbers.filter(pn => partData[pn]);\n      const apiProducts = validApiPartNumbers.map(pn => partData[pn]);\n      const botMessage = {\n        text: apiResponse.content,\n        sender: 'bot',\n        role: 'assistant',\n        content: apiResponse.content,\n        partNumbers: validApiPartNumbers\n      };\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        setIsTyping(false);\n        return newMessages;\n      });\n      if (apiProducts.length > 0) {\n        onProductSelect(apiProducts);\n      }\n    } catch (error) {\n      console.error('Error fetching response from API:', error);\n      const botMessage = {\n        text: language === 'English' ? 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.' : 'Ocurrió un error al obtener la respuesta. Por favor, intenta de nuevo o contacta al soporte en ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n        sender: 'bot',\n        role: 'assistant',\n        content: language === 'English' ? 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.' : 'Ocurrió un error al obtener la respuesta. Por favor, intenta de nuevo o contacta al soporte en ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.'\n      };\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        setIsTyping(false);\n        return newMessages;\n      });\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.length === 0 && !isTyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-message\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: language === 'English' ? '✨ Assistance for your appliance needs' : '✨ Asistencia para tus necesidades de electrodomésticos'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: parseMessageText(message.text)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content typing\",\n            children: language === 'English' ? 'Typing...' : 'Escribiendo...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: textareaRef,\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyPress,\n        placeholder: language === 'English' ? 'Ask about your appliance needs' : 'Pregunte por sus necesidades de electrodomésticos',\n        className: \"chat-textarea\",\n        rows: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"fGZ2sRHXhN4ucsMBqHRtanbs+u0=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getAIMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","partData","onProductSelect","selectedChat","onMessagesUpdate","language","shouldClear","onChatCleared","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","messagesEndRef","textareaRef","_messagesEndRef$curre","current","scrollIntoView","behavior","length","textarea","style","height","scrollHeight","parseMessageText","text","lines","split","map","line","lineIndex","linkRegex","parts","lastIndex","match","exec","fullMatch","linkText","url","startIndex","index","beforeText","slice","push","parseBoldText","href","target","rel","color","textDecoration","children","fileName","_jsxFileName","lineNumber","columnNumber","remainingText","keyPrefix","part","partIndex","startsWith","endsWith","boldText","handleSendMessage","trim","userMessage","sender","role","content","prev","partNumberRegex","partNumbers","matchingProducts","validPartNumbers","normalizedPartNumbers","pn","replace","toUpperCase","filter","partsMessage","apiMessages","msg","concat","apiResponse","apiPartNumbers","normalizedApiPartNumbers","validApiPartNumbers","apiProducts","botMessage","newMessages","error","console","handleKeyPress","e","key","shiftKey","preventDefault","className","message","ref","value","onChange","onKeyDown","placeholder","rows","onClick","_c","$RefreshReg$"],"sources":["/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { getAIMessage } from '../api/api'; \nimport './ChatWindow.css';\n\nconst ChatWindow = ({ partData, onProductSelect, selectedChat, onMessagesUpdate, language, shouldClear, onChatCleared }) => {\n  const [messages, setMessages] = useState(selectedChat?.messages || []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    setMessages(selectedChat?.messages || []);\n  }, [selectedChat]);\n\n  useEffect(() => {\n    if (shouldClear) {\n      setMessages([]);\n      setInput('');\n      setIsTyping(false);\n      onChatCleared();\n    }\n  }, [shouldClear, onChatCleared]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isTyping]);\n\n  useEffect(() => {\n    if (messages.length > 0 && selectedChat?.messages !== messages) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate, selectedChat]);\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    }\n  }, [input]);\n\n  const parseMessageText = (text) => {\n    const lines = text.split('\\n');\n    return lines.map((line, lineIndex) => {\n      const linkRegex = /\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n\n      while ((match = linkRegex.exec(line)) !== null) {\n        const [fullMatch, linkText, url] = match;\n        const startIndex = match.index;\n\n        if (startIndex > lastIndex) {\n          const beforeText = line.slice(lastIndex, startIndex);\n          parts.push(parseBoldText(beforeText, `${lineIndex}-${lastIndex}`));\n        }\n\n        parts.push(\n          <a\n            key={`${lineIndex}-${startIndex}`}\n            href={url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ color: '#2A3F44', textDecoration: 'underline' }}\n          >\n            {linkText}\n          </a>\n        );\n\n        lastIndex = startIndex + fullMatch.length;\n      }\n\n      if (lastIndex < line.length) {\n        const remainingText = line.slice(lastIndex);\n        parts.push(parseBoldText(remainingText, `${lineIndex}-${lastIndex}`));\n      }\n\n      if (parts.length === 0) {\n        parts.push(parseBoldText(line, `${lineIndex}-0`));\n      }\n\n      return (\n        <React.Fragment key={lineIndex}>\n          {parts}\n          {lineIndex < lines.length - 1 && <br />}\n        </React.Fragment>\n      );\n    });\n  };\n\n  const parseBoldText = (text, keyPrefix) => {\n    const parts = text.split(/(\\*\\*[^*]+\\*\\*)/g);\n    return parts.map((part, partIndex) => {\n      if (part.startsWith('**') && part.endsWith('**')) {\n        const boldText = part.slice(2, -2);\n        return <strong key={`${keyPrefix}-${partIndex}`}>{boldText}</strong>;\n      }\n      return part;\n    });\n  };\n\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: 'user', role: 'user', content: input };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsTyping(true);\n\n    const partNumberRegex = /PS-?\\s?\\d+/gi;\n    const partNumbers = input.match(partNumberRegex) || [];\n\n    let matchingProducts = [];\n    let validPartNumbers = [];\n    if (partNumbers.length > 0) {\n      const normalizedPartNumbers = partNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      validPartNumbers = normalizedPartNumbers.filter(pn => partData[pn]);\n      matchingProducts = validPartNumbers.map(pn => partData[pn]);\n    }\n\n    if (matchingProducts.length > 0) {\n      const partsMessage = {\n        text: language === 'English'\n          ? 'Here are the parts I found, I have displayed them in the product card window on the right.'\n          : 'Aquí están las piezas que encontré, las he mostrado en la ventana de tarjetas de productos a la derecha.',\n        sender: 'bot',\n        role: 'assistant',\n        content: language === 'English'\n          ? 'Here are the parts I found, I have displayed them in the product card window on the right.'\n          : 'Aquí están las piezas que encontré, las he mostrado en la ventana de tarjetas de productos a la derecha.',\n        partNumbers: validPartNumbers,\n      };\n      setMessages(prev => [...prev, partsMessage]);\n      onProductSelect(matchingProducts);\n    }\n\n    // Continue with API response regardless of parts found\n    try {\n      const apiMessages = messages.map(msg => ({\n        role: msg.role,\n        content: msg.content,\n      })).concat({ role: 'user', content: input });\n\n      const apiResponse = await getAIMessage(apiMessages, language);\n      const apiPartNumbers = apiResponse.content.match(partNumberRegex) || [];\n      const normalizedApiPartNumbers = apiPartNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      const validApiPartNumbers = normalizedApiPartNumbers.filter(pn => partData[pn]);\n      const apiProducts = validApiPartNumbers.map(pn => partData[pn]);\n\n      const botMessage = {\n        text: apiResponse.content,\n        sender: 'bot',\n        role: 'assistant',\n        content: apiResponse.content,\n        partNumbers: validApiPartNumbers,\n      };\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        setIsTyping(false);\n        return newMessages;\n      });\n\n      if (apiProducts.length > 0) {\n        onProductSelect(apiProducts);\n      }\n    } catch (error) {\n      console.error('Error fetching response from API:', error);\n      const botMessage = {\n        text: language === 'English'\n          ? 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.'\n          : 'Ocurrió un error al obtener la respuesta. Por favor, intenta de nuevo o contacta al soporte en ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n        sender: 'bot',\n        role: 'assistant',\n        content: language === 'English'\n          ? 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.'\n          : 'Ocurrió un error al obtener la respuesta. Por favor, intenta de nuevo o contacta al soporte en ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n      };\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        setIsTyping(false);\n        return newMessages;\n      });\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-messages\">\n        {messages.length === 0 && !isTyping ? (\n          <div className=\"welcome-message\">\n            <h2>\n              {language === 'English'\n                ? '✨ Assistance for your appliance needs'\n                : '✨ Asistencia para tus necesidades de electrodomésticos'}\n            </h2>\n          </div>\n        ) : (\n          <>\n            {messages.map((message, index) => (\n              <div key={index} className={`message ${message.sender}`}>\n                <div className=\"message-content\">\n                  {parseMessageText(message.text)}\n                </div>\n              </div>\n            ))}\n            {isTyping && (\n              <div className=\"message bot\">\n                <div className=\"message-content typing\">\n                  {language === 'English' ? 'Typing...' : 'Escribiendo...'}\n                </div>\n              </div>\n            )}\n          </>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"chat-input\">\n        <textarea\n          ref={textareaRef}\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder={\n            language === 'English'\n              ? 'Ask about your appliance needs'\n              : 'Pregunte por sus necesidades de electrodomésticos'\n          }\n          className=\"chat-textarea\"\n          rows=\"1\"\n        />\n        <button onClick={handleSendMessage}>➤</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}