{"ast":null,"code":"var _jsxFileName = \"/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getAIMessage } from '../api/api';\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWindow = ({\n  partData,\n  onProductSelect,\n  selectedChat,\n  onMessagesUpdate\n}) => {\n  _s();\n  const [messages, setMessages] = useState(selectedChat ? selectedChat.messages : []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false); // New state for typing indicator\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (selectedChat) {\n      setMessages(selectedChat.messages);\n    } else {\n      setMessages([]);\n    }\n  }, [selectedChat]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages, isTyping]); // Include isTyping to scroll when typing indicator appears\n\n  useEffect(() => {\n    // Update the parent component whenever messages change\n    if (messages.length > 0) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate]);\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n\n    // Add the user's message to the conversation\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      role: 'user',\n      content: input\n    };\n    const updatedMessages = [...messages, userMessage];\n    setMessages(updatedMessages);\n    setInput('');\n    setIsTyping(true); // Show typing indicator\n\n    // Debug: Log the raw input\n    console.log('Raw user input:', input);\n\n    // Extract part numbers from the message (e.g., PS12364199, PS-12364199, PS 12364199), case-insensitive\n    const partNumberRegex = /PS-?\\s?\\d+/gi;\n    const partNumbers = input.match(partNumberRegex) || [];\n    console.log('Extracted part numbers:', partNumbers);\n\n    // Debug: Log the partData object and its keys\n    console.log('partData:', partData);\n    console.log('partData keys:', Object.keys(partData));\n\n    // Check if any extracted part numbers exist in partData\n    let matchingProducts = [];\n    let validPartNumbers = [];\n    if (partNumbers.length > 0) {\n      const normalizedPartNumbers = partNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      validPartNumbers = normalizedPartNumbers.filter(pn => partData[pn]);\n      matchingProducts = validPartNumbers.map(pn => partData[pn]);\n      console.log('Found parts in local partData:', matchingProducts);\n    }\n\n    // If parts are found in local partData, use them; otherwise, make an API call\n    if (matchingProducts.length > 0) {\n      const botMessage = {\n        text: 'Here are the parts I found:',\n        sender: 'bot',\n        role: 'assistant',\n        content: 'Here are the parts I found:',\n        partNumbers: validPartNumbers\n      };\n      console.log('Bot message to be added (local data):', botMessage);\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        console.log('Messages after update (local data):', newMessages);\n        setIsTyping(false); // Hide typing indicator\n        return newMessages;\n      });\n\n      // Pass all matching products to the parent\n      console.log('Selected products (local data):', matchingProducts);\n      onProductSelect(matchingProducts);\n    } else {\n      // Make an API call with the conversation history\n      try {\n        // Format the messages for the DeepSeek API\n        const apiMessages = updatedMessages.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        }));\n\n        // Call the DeepSeek API\n        const apiResponse = await getAIMessage(apiMessages);\n        console.log('API response:', apiResponse);\n\n        // Extract any part numbers mentioned in the API response\n        const apiPartNumbers = apiResponse.content.match(partNumberRegex) || [];\n        const normalizedApiPartNumbers = apiPartNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n        const validApiPartNumbers = normalizedApiPartNumbers.filter(pn => partData[pn]);\n        const apiProducts = validApiPartNumbers.map(pn => partData[pn]);\n\n        // Create the bot message with the API response\n        const botMessage = {\n          text: apiResponse.content,\n          sender: 'bot',\n          role: 'assistant',\n          content: apiResponse.content,\n          partNumbers: validApiPartNumbers\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          console.log('Messages after update (API data):', newMessages);\n          setIsTyping(false); // Hide typing indicator\n          return newMessages;\n        });\n\n        // If the API response includes valid part numbers from partData, pass all matching products\n        if (apiProducts.length > 0) {\n          console.log('Selected products (API data):', apiProducts);\n          onProductSelect(apiProducts);\n        }\n      } catch (error) {\n        console.error('Error fetching response from API:', error);\n        const botMessage = {\n          text: 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n          sender: 'bot',\n          role: 'assistant',\n          content: 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.'\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          console.log('Messages after update (API error):', newMessages);\n          setIsTyping(false); // Hide typing indicator\n          return newMessages;\n        });\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.length === 0 && !isTyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sparkles\",\n          children: \"\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Ask our Bot anything\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [message.text, message.partNumbers && message.partNumbers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"part-numbers\",\n              children: message.partNumbers.map((partNumber, idx) => {\n                const product = partData[partNumber];\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"product-link\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => onProductSelect([product]),\n                    children: product ? product.name : partNumber\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 29\n                  }, this)\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 27\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content typing\",\n            children: \"Typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"order-support-btn\",\n        children: \"\\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Ask about your appliance parts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"EFfatz/TcNPYOUZLvCTZXgh2mZc=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getAIMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","partData","onProductSelect","selectedChat","onMessagesUpdate","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","length","handleSendMessage","trim","userMessage","text","sender","role","content","updatedMessages","console","log","partNumberRegex","partNumbers","match","Object","keys","matchingProducts","validPartNumbers","normalizedPartNumbers","map","pn","replace","toUpperCase","filter","botMessage","prev","newMessages","apiMessages","msg","apiResponse","apiPartNumbers","normalizedApiPartNumbers","validApiPartNumbers","apiProducts","error","handleKeyPress","e","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","index","partNumber","idx","product","onClick","name","ref","type","value","onChange","target","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { getAIMessage } from '../api/api'; \nimport './ChatWindow.css';\n\nconst ChatWindow = ({ partData, onProductSelect, selectedChat, onMessagesUpdate }) => {\n  const [messages, setMessages] = useState(selectedChat ? selectedChat.messages : []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false); // New state for typing indicator\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    if (selectedChat) {\n      setMessages(selectedChat.messages);\n    } else {\n      setMessages([]);\n    }\n  }, [selectedChat]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isTyping]); // Include isTyping to scroll when typing indicator appears\n\n  useEffect(() => {\n    // Update the parent component whenever messages change\n    if (messages.length > 0) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate]);\n\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n\n    // Add the user's message to the conversation\n    const userMessage = { text: input, sender: 'user', role: 'user', content: input };\n    const updatedMessages = [...messages, userMessage];\n    setMessages(updatedMessages);\n    setInput('');\n    setIsTyping(true); // Show typing indicator\n\n    // Debug: Log the raw input\n    console.log('Raw user input:', input);\n\n    // Extract part numbers from the message (e.g., PS12364199, PS-12364199, PS 12364199), case-insensitive\n    const partNumberRegex = /PS-?\\s?\\d+/gi;\n    const partNumbers = input.match(partNumberRegex) || [];\n    console.log('Extracted part numbers:', partNumbers);\n\n    // Debug: Log the partData object and its keys\n    console.log('partData:', partData);\n    console.log('partData keys:', Object.keys(partData));\n\n    // Check if any extracted part numbers exist in partData\n    let matchingProducts = [];\n    let validPartNumbers = [];\n    if (partNumbers.length > 0) {\n      const normalizedPartNumbers = partNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      validPartNumbers = normalizedPartNumbers.filter(pn => partData[pn]);\n      matchingProducts = validPartNumbers.map(pn => partData[pn]);\n      console.log('Found parts in local partData:', matchingProducts);\n    }\n\n    // If parts are found in local partData, use them; otherwise, make an API call\n    if (matchingProducts.length > 0) {\n      const botMessage = {\n        text: 'Here are the parts I found:',\n        sender: 'bot',\n        role: 'assistant',\n        content: 'Here are the parts I found:',\n        partNumbers: validPartNumbers,\n      };\n      console.log('Bot message to be added (local data):', botMessage);\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        console.log('Messages after update (local data):', newMessages);\n        setIsTyping(false); // Hide typing indicator\n        return newMessages;\n      });\n\n      // Pass all matching products to the parent\n      console.log('Selected products (local data):', matchingProducts);\n      onProductSelect(matchingProducts);\n    } else {\n      // Make an API call with the conversation history\n      try {\n        // Format the messages for the DeepSeek API\n        const apiMessages = updatedMessages.map(msg => ({\n          role: msg.role,\n          content: msg.content,\n        }));\n\n        // Call the DeepSeek API\n        const apiResponse = await getAIMessage(apiMessages);\n        console.log('API response:', apiResponse);\n\n        // Extract any part numbers mentioned in the API response\n        const apiPartNumbers = apiResponse.content.match(partNumberRegex) || [];\n        const normalizedApiPartNumbers = apiPartNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n        const validApiPartNumbers = normalizedApiPartNumbers.filter(pn => partData[pn]);\n        const apiProducts = validApiPartNumbers.map(pn => partData[pn]);\n\n        // Create the bot message with the API response\n        const botMessage = {\n          text: apiResponse.content,\n          sender: 'bot',\n          role: 'assistant',\n          content: apiResponse.content,\n          partNumbers: validApiPartNumbers,\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          console.log('Messages after update (API data):', newMessages);\n          setIsTyping(false); // Hide typing indicator\n          return newMessages;\n        });\n\n        // If the API response includes valid part numbers from partData, pass all matching products\n        if (apiProducts.length > 0) {\n          console.log('Selected products (API data):', apiProducts);\n          onProductSelect(apiProducts);\n        }\n      } catch (error) {\n        console.error('Error fetching response from API:', error);\n        const botMessage = {\n          text: 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n          sender: 'bot',\n          role: 'assistant',\n          content: 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          console.log('Messages after update (API error):', newMessages);\n          setIsTyping(false); // Hide typing indicator\n          return newMessages;\n        });\n      }\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-messages\">\n        {messages.length === 0 && !isTyping ? (\n          <div className=\"welcome-message\">\n            <div className=\"sparkles\">✨</div>\n            <h2>Ask our Bot anything</h2>\n          </div>\n        ) : (\n          <>\n            {messages.map((message, index) => (\n              <div key={index} className={`message ${message.sender}`}>\n                <div className=\"message-content\">\n                  {message.text}\n                  {message.partNumbers && message.partNumbers.length > 0 && (\n                    <div className=\"part-numbers\">\n                      {message.partNumbers.map((partNumber, idx) => {\n                        const product = partData[partNumber];\n                        return (\n                          <div key={idx} className=\"product-link\">\n                            <button onClick={() => onProductSelect([product])}>\n                              {product ? product.name : partNumber}\n                            </button>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n            {isTyping && (\n              <div className=\"message bot\">\n                <div className=\"message-content typing\">\n                  Typing...\n                </div>\n              </div>\n            )}\n          </>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"chat-input\">\n        <button className=\"order-support-btn\">✨</button>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Ask about your appliance parts\"\n        />\n        <button onClick={handleSendMessage}>➤</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}