{"ast":null,"code":"var _jsxFileName = \"/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getAIMessage } from '../api/api';\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWindow = ({\n  partData,\n  onProductSelect,\n  selectedChat,\n  onMessagesUpdate\n}) => {\n  _s();\n  const [messages, setMessages] = useState(selectedChat ? selectedChat.messages : []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (selectedChat) {\n      setMessages(selectedChat.messages);\n    } else {\n      setMessages([]);\n    }\n  }, [selectedChat]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages, isTyping]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate]);\n\n  // Helper function to parse text, bold **text**, and preserve line breaks\n  const parseMessageText = text => {\n    // Split the text by line breaks\n    const lines = text.split('\\n');\n\n    // Process each line for bolding and map to JSX\n    return lines.map((line, lineIndex) => {\n      // Split each line by **text** pattern for bolding\n      const parts = line.split(/(\\*\\*[^*]+\\*\\*)/g);\n      const parsedLine = parts.map((part, partIndex) => {\n        if (part.startsWith('**') && part.endsWith('**')) {\n          const boldText = part.slice(2, -2); // Remove the ** markers\n          return /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: boldText\n          }, `${lineIndex}-${partIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 18\n          }, this);\n        }\n        return part;\n      });\n\n      // Add a <br /> after each line except the last one\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [parsedLine, lineIndex < lines.length - 1 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 44\n        }, this)]\n      }, lineIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      role: 'user',\n      content: input\n    };\n    const updatedMessages = [...messages, userMessage];\n    setMessages(updatedMessages);\n    setInput('');\n    setIsTyping(true);\n    console.log('Raw user input:', input);\n    const partNumberRegex = /PS-?\\s?\\d+/gi;\n    const partNumbers = input.match(partNumberRegex) || [];\n    console.log('Extracted part numbers:', partNumbers);\n    console.log('partData:', partData);\n    console.log('partData keys:', Object.keys(partData));\n    let matchingProducts = [];\n    let validPartNumbers = [];\n    if (partNumbers.length > 0) {\n      const normalizedPartNumbers = partNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      validPartNumbers = normalizedPartNumbers.filter(pn => partData[pn]);\n      matchingProducts = validPartNumbers.map(pn => partData[pn]);\n      console.log('Found parts in local partData:', matchingProducts);\n    }\n    if (matchingProducts.length > 0) {\n      const botMessage = {\n        text: 'Here are the parts I found:',\n        sender: 'bot',\n        role: 'assistant',\n        content: 'Here are the parts I found:',\n        partNumbers: validPartNumbers\n      };\n      console.log('Bot message to be added (local data):', botMessage);\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        console.log('Messages after update (local data):', newMessages);\n        setIsTyping(false);\n        return newMessages;\n      });\n      console.log('Selected products (local data):', matchingProducts);\n      onProductSelect(matchingProducts);\n    } else {\n      try {\n        const apiMessages = updatedMessages.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        }));\n        const apiResponse = await getAIMessage(apiMessages);\n        console.log('API response:', apiResponse);\n        const apiPartNumbers = apiResponse.content.match(partNumberRegex) || [];\n        const normalizedApiPartNumbers = apiPartNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n        const validApiPartNumbers = normalizedApiPartNumbers.filter(pn => partData[pn]);\n        const apiProducts = validApiPartNumbers.map(pn => partData[pn]);\n        const botMessage = {\n          text: apiResponse.content,\n          sender: 'bot',\n          role: 'assistant',\n          content: apiResponse.content,\n          partNumbers: validApiPartNumbers\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          console.log('Messages after update (API data):', newMessages);\n          setIsTyping(false);\n          return newMessages;\n        });\n        if (apiProducts.length > 0) {\n          console.log('Selected products (API data):', apiProducts);\n          onProductSelect(apiProducts);\n        }\n      } catch (error) {\n        console.error('Error fetching response from API:', error);\n        const botMessage = {\n          text: 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n          sender: 'bot',\n          role: 'assistant',\n          content: 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.'\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          console.log('Messages after update (API error):', newMessages);\n          setIsTyping(false);\n          return newMessages;\n        });\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.length === 0 && !isTyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-message\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u2728  Assisstance for your appliance needs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: parseMessageText(message.text)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content typing\",\n            children: \"Typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"order-support-btn\",\n        children: \"\\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Ask about your appliance parts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"EFfatz/TcNPYOUZLvCTZXgh2mZc=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getAIMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","partData","onProductSelect","selectedChat","onMessagesUpdate","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","length","parseMessageText","text","lines","split","map","line","lineIndex","parts","parsedLine","part","partIndex","startsWith","endsWith","boldText","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSendMessage","trim","userMessage","sender","role","content","updatedMessages","console","log","partNumberRegex","partNumbers","match","Object","keys","matchingProducts","validPartNumbers","normalizedPartNumbers","pn","replace","toUpperCase","filter","botMessage","prev","newMessages","apiMessages","msg","apiResponse","apiPartNumbers","normalizedApiPartNumbers","validApiPartNumbers","apiProducts","error","handleKeyPress","e","key","className","message","index","ref","type","value","onChange","target","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { getAIMessage } from '../api/api'; \nimport './ChatWindow.css';\n\nconst ChatWindow = ({ partData, onProductSelect, selectedChat, onMessagesUpdate }) => {\n  const [messages, setMessages] = useState(selectedChat ? selectedChat.messages : []);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    if (selectedChat) {\n      setMessages(selectedChat.messages);\n    } else {\n      setMessages([]);\n    }\n  }, [selectedChat]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isTyping]);\n\n  useEffect(() => {\n    if (messages.length > 0) {\n      onMessagesUpdate(messages);\n    }\n  }, [messages, onMessagesUpdate]);\n\n  // Helper function to parse text, bold **text**, and preserve line breaks\n  const parseMessageText = (text) => {\n    // Split the text by line breaks\n    const lines = text.split('\\n');\n    \n    // Process each line for bolding and map to JSX\n    return lines.map((line, lineIndex) => {\n      // Split each line by **text** pattern for bolding\n      const parts = line.split(/(\\*\\*[^*]+\\*\\*)/g);\n      const parsedLine = parts.map((part, partIndex) => {\n        if (part.startsWith('**') && part.endsWith('**')) {\n          const boldText = part.slice(2, -2); // Remove the ** markers\n          return <strong key={`${lineIndex}-${partIndex}`}>{boldText}</strong>;\n        }\n        return part;\n      });\n\n      // Add a <br /> after each line except the last one\n      return (\n        <React.Fragment key={lineIndex}>\n          {parsedLine}\n          {lineIndex < lines.length - 1 && <br />}\n        </React.Fragment>\n      );\n    });\n  };\n\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: 'user', role: 'user', content: input };\n    const updatedMessages = [...messages, userMessage];\n    setMessages(updatedMessages);\n    setInput('');\n    setIsTyping(true);\n\n    console.log('Raw user input:', input);\n\n    const partNumberRegex = /PS-?\\s?\\d+/gi;\n    const partNumbers = input.match(partNumberRegex) || [];\n    console.log('Extracted part numbers:', partNumbers);\n\n    console.log('partData:', partData);\n    console.log('partData keys:', Object.keys(partData));\n\n    let matchingProducts = [];\n    let validPartNumbers = [];\n    if (partNumbers.length > 0) {\n      const normalizedPartNumbers = partNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n      validPartNumbers = normalizedPartNumbers.filter(pn => partData[pn]);\n      matchingProducts = validPartNumbers.map(pn => partData[pn]);\n      console.log('Found parts in local partData:', matchingProducts);\n    }\n\n    if (matchingProducts.length > 0) {\n      const botMessage = {\n        text: 'Here are the parts I found:',\n        sender: 'bot',\n        role: 'assistant',\n        content: 'Here are the parts I found:',\n        partNumbers: validPartNumbers,\n      };\n      console.log('Bot message to be added (local data):', botMessage);\n      setMessages(prev => {\n        const newMessages = [...prev, botMessage];\n        console.log('Messages after update (local data):', newMessages);\n        setIsTyping(false);\n        return newMessages;\n      });\n\n      console.log('Selected products (local data):', matchingProducts);\n      onProductSelect(matchingProducts);\n    } else {\n      try {\n        const apiMessages = updatedMessages.map(msg => ({\n          role: msg.role,\n          content: msg.content,\n        }));\n\n        const apiResponse = await getAIMessage(apiMessages);\n        console.log('API response:', apiResponse);\n\n        const apiPartNumbers = apiResponse.content.match(partNumberRegex) || [];\n        const normalizedApiPartNumbers = apiPartNumbers.map(pn => pn.replace(/[-\\s]/g, '').trim().toUpperCase());\n        const validApiPartNumbers = normalizedApiPartNumbers.filter(pn => partData[pn]);\n        const apiProducts = validApiPartNumbers.map(pn => partData[pn]);\n\n        const botMessage = {\n          text: apiResponse.content,\n          sender: 'bot',\n          role: 'assistant',\n          content: apiResponse.content,\n          partNumbers: validApiPartNumbers,\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          console.log('Messages after update (API data):', newMessages);\n          setIsTyping(false);\n          return newMessages;\n        });\n\n        if (apiProducts.length > 0) {\n          console.log('Selected products (API data):', apiProducts);\n          onProductSelect(apiProducts);\n        }\n      } catch (error) {\n        console.error('Error fetching response from API:', error);\n        const botMessage = {\n          text: 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n          sender: 'bot',\n          role: 'assistant',\n          content: 'An error occurred while fetching the response. Please try again or contact support at ' + (partData[\"Support Phone Number\"] || '1-888-738-4871') + '.',\n        };\n        setMessages(prev => {\n          const newMessages = [...prev, botMessage];\n          console.log('Messages after update (API error):', newMessages);\n          setIsTyping(false);\n          return newMessages;\n        });\n      }\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-messages\">\n        {messages.length === 0 && !isTyping ? (\n          <div className=\"welcome-message\">\n            <h2>✨  Assisstance for your appliance needs</h2>\n          </div>\n        ) : (\n          <>\n            {messages.map((message, index) => (\n              <div key={index} className={`message ${message.sender}`}>\n                <div className=\"message-content\">\n                  {parseMessageText(message.text)}\n                </div>\n              </div>\n            ))}\n            {isTyping && (\n              <div className=\"message bot\">\n                <div className=\"message-content typing\">\n                  Typing...\n                </div>\n              </div>\n            )}\n          </>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"chat-input\">\n        <button className=\"order-support-btn\">✨</button>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Ask about your appliance parts\"\n        />\n        <button onClick={handleSendMessage}>➤</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}