{"ast":null,"code":"import axios from 'axios';\nimport partData from '../partData.json';\nconst API_KEY = process.env.REACT_APP_DEEPSEEK_API_KEY;\nconst API_URL = 'https://api.deepseek.com/v1/chat/completions';\n\n// Debug: Log the API key to confirm it's being read\nconsole.log('API_KEY:', API_KEY);\n\n// ... (other functions)\n\nexport const getAIMessage = async messages => {\n  try {\n    // Extract context from the user's message\n    const {\n      partType,\n      appliance\n    } = extractContextFromMessages(messages);\n\n    // Filter valid part numbers based on context\n    const validPartNumbers = filterPartNumbers(partType, appliance);\n\n    // Construct the system prompt with the filtered list of valid part numbers\n    const systemPrompt = `\n      You are a helpful assistant for appliance parts. Provide accurate information about appliance parts and troubleshooting.\n      The user is asking about a ${partType} for a ${appliance}.\n      When mentioning part numbers, you MUST only use part numbers from the following list: ${validPartNumbers.join(', ') || 'none'}.\n      Do NOT generate or use random part numbers that are not in this list.\n      If no applicable part numbers are available for the requested part type and appliance, do not mention a specific part number and instead suggest that the user contact support for assistance.\n    `;\n    const response = await axios.post(API_URL, {\n      model: 'deepseek-chat',\n      messages: [{\n        role: 'system',\n        content: systemPrompt\n      }, ...messages],\n      max_tokens: 500,\n      temperature: 0.7\n    }, {\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data.choices[0].message;\n  } catch (error) {\n    console.error('Error calling DeepSeek API:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","partData","API_KEY","process","env","REACT_APP_DEEPSEEK_API_KEY","API_URL","console","log","getAIMessage","messages","partType","appliance","extractContextFromMessages","validPartNumbers","filterPartNumbers","systemPrompt","join","response","post","model","role","content","max_tokens","temperature","headers","data","choices","message","error"],"sources":["/Users/anuraghodke/Documents/Job Apps/Instalily Inc./case-study/src/api/api.js"],"sourcesContent":["import axios from 'axios';\nimport partData from '../partData.json';\n\nconst API_KEY = process.env.REACT_APP_DEEPSEEK_API_KEY;\nconst API_URL = 'https://api.deepseek.com/v1/chat/completions';\n\n// Debug: Log the API key to confirm it's being read\nconsole.log('API_KEY:', API_KEY);\n\n// ... (other functions)\n\nexport const getAIMessage = async (messages) => {\n  try {\n    // Extract context from the user's message\n    const { partType, appliance } = extractContextFromMessages(messages);\n\n    // Filter valid part numbers based on context\n    const validPartNumbers = filterPartNumbers(partType, appliance);\n\n    // Construct the system prompt with the filtered list of valid part numbers\n    const systemPrompt = `\n      You are a helpful assistant for appliance parts. Provide accurate information about appliance parts and troubleshooting.\n      The user is asking about a ${partType} for a ${appliance}.\n      When mentioning part numbers, you MUST only use part numbers from the following list: ${validPartNumbers.join(', ') || 'none'}.\n      Do NOT generate or use random part numbers that are not in this list.\n      If no applicable part numbers are available for the requested part type and appliance, do not mention a specific part number and instead suggest that the user contact support for assistance.\n    `;\n\n    const response = await axios.post(\n      API_URL,\n      {\n        model: 'deepseek-chat',\n        messages: [\n          {\n            role: 'system',\n            content: systemPrompt\n          },\n          ...messages\n        ],\n        max_tokens: 500,\n        temperature: 0.7\n      },\n      {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    return response.data.choices[0].message;\n  } catch (error) {\n    console.error('Error calling DeepSeek API:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;AACtD,MAAMC,OAAO,GAAG,8CAA8C;;AAE9D;AACAC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEN,OAAO,CAAC;;AAEhC;;AAEA,OAAO,MAAMO,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF;IACA,MAAM;MAAEC,QAAQ;MAAEC;IAAU,CAAC,GAAGC,0BAA0B,CAACH,QAAQ,CAAC;;IAEpE;IACA,MAAMI,gBAAgB,GAAGC,iBAAiB,CAACJ,QAAQ,EAAEC,SAAS,CAAC;;IAE/D;IACA,MAAMI,YAAY,GAAG;AACzB;AACA,mCAAmCL,QAAQ,UAAUC,SAAS;AAC9D,8FAA8FE,gBAAgB,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,MAAM;AACnI;AACA;AACA,KAAK;IAED,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAC/Bb,OAAO,EACP;MACEc,KAAK,EAAE,eAAe;MACtBV,QAAQ,EAAE,CACR;QACEW,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAEN;MACX,CAAC,EACD,GAAGN,QAAQ,CACZ;MACDa,UAAU,EAAE,GAAG;MACfC,WAAW,EAAE;IACf,CAAC,EACD;MACEC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUvB,OAAO,EAAE;QACpC,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IAED,OAAOgB,QAAQ,CAACQ,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO;EACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdtB,OAAO,CAACsB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}